<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SHASHANK</title>
    <link>https://lab.shashank.club/</link>
    <description>Recent content on SHASHANK</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Sep 2023 00:03:00 +0530</lastBuildDate><atom:link href="https://lab.shashank.club/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating Your Personal Ubuntu Server: A Comprehensive Step-by-Step Tutorial</title>
      <link>https://lab.shashank.club/docs/test/</link>
      <pubDate>Wed, 20 Sep 2023 00:03:00 +0530</pubDate>
      
      <guid>https://lab.shashank.club/docs/test/</guid>
      <description>Imagine all your photos, videos, documents, and even the music you love, all in one safe place that you control. That&amp;rsquo;s what a home server does for you. Setting up a home server serves as your personal hub for digital activities within your home network. It&amp;rsquo;s like having your own mini data center right at home. The primary purpose of a home server is to centralize and manage various services and resources, making your digital life more convenient and efficient.</description>
    </item>
    
    <item>
      <title>lab program(temporary post)</title>
      <link>https://lab.shashank.club/docs/lab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lab.shashank.club/docs/lab/</guid>
      <description>Table of Contents Program 1 A * Search Program 2 AO* Search Program 3 Candidate Elimination Program 4 Decesion Tree using ID Tree Algo Program 5 Backpropogation Algo Program 6 Naive Bayes Classifier Program 7 K-means EM Algorithm Program 8 KNN algo Program 9 Locally Weighted Depression Program 1 def aStarAlgo(start_node, stop_node): open_set = set([start_node]) closed_set = set() g = {start_node: 0} parents = {start_node: start_node} while len(open_set) &amp;gt; 0: n = None for v in open_set: if n is None or g[v] + heuristic(v) &amp;lt; g[n] + heuristic(n): n = v if n == stop_node or Graph_nodes[n] is None: pass else: for (m, weight) in get_neighbors(n): if m not in open_set and m not in closed_set: open_set.</description>
    </item>
    
  </channel>
</rss>
